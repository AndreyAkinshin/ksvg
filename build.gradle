buildscript {
    ext.kotlin_version = kotlin_version

    repositories {
        jcenter()
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version",
                "gradle.plugin.com.github.nwillc:vplugin:$vplugin_version",
                "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version",
                "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

group 'com.github.nwillc'
version '1.3.2'

apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.nwillc.vplugin'
apply plugin: 'org.jetbrains.dokka'

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testCompile "org.junit.jupiter:junit-jupiter-engine:$jupiter_version",
            "org.junit.platform:junit-platform-runner:$junit_platform_version",
            "org.assertj:assertj-core:$assertj_version"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()

    beforeTest { descriptor ->
        logger.lifecycle("\tRunning $descriptor.className.$descriptor.name")
    }

    afterSuite { descriptor, result ->
        if (descriptor.parent == null) {
            logger.lifecycle("\tTests run: $result.testCount, Failures: $result.failedTestCount, Skipped: $result.skippedTestCount")
        }
    }

    testLogging {
        showStandardStreams true
        exceptionFormat "full"
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: ['dokka']) {
    from "$buildDir/javadoc"
    classifier = 'javadoc'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

publish.dependsOn = ['assemble', 'sourceJar', 'generatePomFileForMavenPublication']

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("${buildDir}/libs/${project.name}-${version}.pom")
    }
}


bintrayUpload.onlyIf { !project.version.toString().endsWith('SNAPSHOT') }

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    dryRun = false
    publish = true
    publications = ['maven']
    pkg {
        repo = 'maven'
        name = project.name
        desc = 'Kotlin SVG generation DSL.'
        websiteUrl = 'https://github.com/nwillc/ksvg'
        issueTrackerUrl = 'https://github.com/nwillc/ksvg/issues'
        vcsUrl = 'https://github.com/nwillc/ksvg.git'
        licenses = ['ISC']
        labels = ['kotlin', 'SVG', 'DSL']
        publicDownloadNumbers = true
    }
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}